パスワード保存の常識(?)
--------------------------------------
* 自己紹介
* パスワード保存の常識(?)の復習
* 鍵を利用したパスワード保存案
* まとめ

.. raw:: pdf

    PageBreak

自己紹介
=============================================================

* ECナビ システム本部 春山征吾 `@haruyama <https://twitter.com/#!/haruyama>`_
* セキュリティ

  * OpenSSH (本x2, `OpenSSH情報 <http://www.unixuser.org/~haruyama/security/openssh/>`_)
  * `暗号技術大全 <http://www.sbcr.jp/products/4797319119.html>`_ 

    * 18章(ハッシュ), 20章(電子署名)翻訳担当

* 全文検索システム Apache Solrの勉強会開催

    * 次回は11/19(金)予定

.. raw:: pdf

    PageBreak

資料
======================================

* 本資料

  * TODO

* 本日用のネタページ

 * http://goo.gl/UIwW (ゆー あい だぶ だぶ)

.. raw:: pdf

    PageBreak

パスワード保存の常識(?)
======================================

保存 
  * saltを付けてハッシュ化

    * 保存された情報からはパスワードは復元困難

照合 
  * 入力値をsaltを付けてハッシュ化. 保存情報と照合


.. raw:: pdf

    PageBreak

GNU/Linuxでのパスワード保存
=============================================================

他のUnixも同様

形式
  $id$salt$hashed
例
  $6$3d1ahuOb$KiH....(略)

* id: ハッシュ(後述)の識別子

  * 1 => MD5, 5 => SHA-256 6 => SHA-512

* salt: ソルト, お塩
* hashed: ハッシュ化されたパスワード情報

.. raw:: pdf

    PageBreak

ハッシュとは?
==========================================

`暗号学的ハッシュ関数 - Wikipedia <http://ja.wikipedia.org/wiki/%E6%9A%97%E5%8F%B7%E5%AD%A6%E7%9A%84%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E9%96%A2%E6%95%B0>`_


* 与えられたメッセージに対してハッシュ値を 容易に計算できる。
* ハッシュ値から元のメッセージを得ることが 事実上不可能であること。
* ハッシュ値を変えずにメッセージを改竄することが 事実上不可能であること。
* 同じハッシュ値を持つ2つのメッセージを求めることが 事実上不可能であること。

* 例: MD5, SHA1, SHA-256,512

.. raw:: pdf

    PageBreak

salt(ソルト, お塩)とは?
==========================================

ハッシュの値をかきまぜる「お塩」.

* 単にハッシュ化するだけでは, 同じパスワードを利用する人が複数いると同じ encrypted が生成される

  * ユーザごとに異なる必要がある

      * ランダムである必要はない

* サイズ

    * 伝統的なunix: 12bit
    * 現在のGNU/Linux: 96bit
    * CRYPTOGRAPHY ENGINEERING での推奨: ハッシュの出力サイズと同じ


.. raw:: pdf

    PageBreak

実際の処理
==========================================

* CRYPTOGRAPHY ENGINEERING p304 の方式 ( || は文字列連結)

TODO: 画像かなにかにする

| x_0 = 0
| x_i = h(x_(i-1) || password || salt) for i = 1,....r
| K = x_r

* `[ crypt() アルゴリズム解析 (MD5バージョン) ] <http://ruffnex.oc.to/kenji/xrea/md5crypt.txt>`_

どちらも ハッシュを何度も利用する (stretch)

.. raw:: pdf

    PageBreak


stretchとは?
======================================================

* ハッシュを繰り返し利用することで, ハッシュ値を求めるのに必要な時間を増大させる

  * 攻撃に時間がかかるようになる

    * = パスワードの文字数を伸ばす(stretch)のと同じ効果

* どれくらいやるのか

  * crypt() MD5の場合: 1000回
  * crypt() SHA-256,512の場合: (デフォルト)5000回
  * CRYPTOGRAPHY ENGINEERING での例: 2^20(約100万)回

.. raw:: pdf

    PageBreak

stretchの効果(1)
======================================================

stretchの効果をはかるために, PHPのmcrypt拡張でSHA-256を繰り返し呼ぶコードで計測

* 方式は CRYPTOGRAPHY ENGINEERING のもの
* パスワード 10byte
* salt 32byte
* CPU 1コアのみ利用

Intel(R) Core(TM) i7 CPU 920  @ 2.67GHz で 1秒に 約50万回計算できた.

.. raw:: pdf

    PageBreak

stretchの効果(2)
======================================================


* パスワードの文字種を64bitとすると
  
======= =============================
文字数  総パスワード数
======= =============================
n       64^n
3        26万
4        1677万
5        10億
6        687億
7        4兆
8        281兆
======= =============================

.. raw:: pdf

    PageBreak

stretchの効果(3)
======================================================

1CPU(8コア)のPCでどれだけパスワード解析できるか考察

* 1日3456億回 SHA-256を計算可能

  * stretch がないと...
    
    * 6文字が 0.2日,  7文字が 13日

  * 1000回 stretch すると

    * 1日3.5億回パスワードを計算可能

    * 5文字が 3日, 6文字だと 199日


.. raw:: pdf

    PageBreak

なぜUnixはこの方式なのか?
==============================================

* なぜ可逆な暗号化ではないのか?
    
  * 鍵を管理するのが難しい. 以下からパスワード情報と鍵が漏れるかもしれない

     * バックアップファイル
     * システムの脆弱性

  * 特権ユーザが生パスワードを見れる

.. raw:: pdf

    PageBreak

常識(?)のまとめ
==============================================

* パスワードはハッシュ化して保存

  * この時 salt と stretch を利用


* メリット

    * 鍵管理が不要
    * 生パスワードを復元できない

* デメリット

    * 弱いパスワードが記録された情報だけで破れる


.. raw:: pdf

    PageBreak

Webシステムでは?
===========================================

* 通常WebサーバとDBサーバは物理的に分離されている (されていない場合もあるが).

  * Unixよりもパスワード情報と鍵が 共に漏洩するコストは低いだろう.

  * ただし, 鍵管理のコストは高い

    * 漏洩, 改竄, 紛失

.. raw:: pdf

    PageBreak


鍵を用いる場合の手法案
===========================================

* (共通鍵)暗号
* ハッシュ+暗号
* 鍵付きハッシュ
      

.. raw:: pdf

    PageBreak

(共通鍵)暗号
===========================

* メリット

  * ちゃんと暗号化し鍵が安全ならば, 弱いパスワードも記録された情報だけでは破れない

* デメリット

  * 鍵があればパスワードを復元できる
  * 鍵の管理の必要がある


.. raw:: pdf

    PageBreak

ハッシュ+暗号
===========================

常識(?)通りにハッシュ化したあとで暗号化

* メリット

  * ちゃんと暗号化し鍵が安全ならば, 弱いパスワードも記録された情報だけでは破れない
  * 鍵を保持するものでも生パスワードを復元できない

* デメリット

  * 鍵の管理の必要がある

.. raw:: pdf

    PageBreak


鍵付きハッシュ(1)
===========================

* saltに秘密の情報を入れてハッシュ?

  * 単純に鍵と平文を文字列連結をしたものをハッシュ するMACは期待通りの強度がないという論文

    `On the Security of Two MAC Algorithms <http://www.cix.co.uk/~klockstone/twomacs.p
    df>`_

  * hash(key || salt || password) 的なものはやめたほうがよさそう

.. raw:: pdf

    PageBreak

鍵付きハッシュ(2)
===========================

* 鍵付きハッシュを用いるならHMACを応用したほうがよい

    * HMACには前述の問題はない

      * CRAM-MD5 はHMACを元にしたパスワード保持をしている.

       * `Dovecot が保存する CRAM-MD5 認証用パスワード - snbhsmt_log <http://snbhsmt. blog110.fc2.com/blog-entry-35.html>`_


.. raw:: pdf

    PageBreak

鍵付きハッシュ(3)
===========================


* メリット

  * ちゃんとしたアルゴリズムを用いて鍵が安全ならば, 弱いパスワードも記録された情報だけでは破れない
    
    * 「ちゃんと」しているかは「ちゃんと」した人にレビューしてほしい
                      
  * 鍵を保持するものでも生パスワードを復元できない

* デメリット

  * 鍵の管理の必要がある

.. raw:: pdf

    PageBreak

まとめ
================

===============   ======================================   ===================================  ==============================
方式                弱パスワードの保護                         生パスワード復元                   鍵管理
===============   ======================================   ===================================  ==============================
ハッシュ            stretchで対応                            不可能                               不必要
暗号                      可能                               可能                                必要
ハッシュ+暗号        可能                                    不可能                             必要
鍵付きハッシュ        可能                                    不可能                             必要
===============   ======================================   ===================================  ==============================
